version: 2.1
commands: # similar to function (reusable)
  print_pipeline_id:
    description: print current pipeline.id
    parameters:
      additional_print:
        type: string
        default: "Hello World!"
    steps:
      - run: echo <<pipeline.id>>
      - run: echo $CIRCLE_WORKFLOW_ID
      - run: echo <<parameters.additional_print>>
  destroy_environment:
    description: Destroy current environment
    parameters:
      stack_name:
        type: string
        default: circleCI
      region:
        type: string
        default: "us-east-2"
    steps:
      - run:
          command: aws cloudformation delete-stack --stack-name <<parameters.stack_name>> --region  <<parameters.region>>
          when: on_fail


orbs:
  aws-cli: circleci/aws-cli@3.1.1

jobs:
  save_hello_world_output:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          command: |
            pwd
            echo "hello world" > output.txt
            mkdir -p sandbox
            echo "Secret" > ./sandbox/secret.txt
            ls -la
      - persist_to_workspace:
          root: .
          paths:
            - output*
      - persist_to_workspace:
          root: ./sandbox
          paths:
            - "*"

  print_output_file:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - attach_workspace:
          at: ./sandbox
      - run:
          command: |
            ls -la
            cat output.txt
            cat ./sandbox/secret.txt

  useful_info:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - print_pipeline_id:
          additional_print: "BaoTruong"
      - run:
          name: "Useful Global build-in vars"
          command: |
            whoami
            ls -la
            sudo -l
            echo My pipeline id is << pipeline.id >> and my git branch is << pipeline.git.branch >>.
            echo <<pipeline.project.type>> - <<pipeline.project.git_url>>
            echo ${Author}

  always_fail_job:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: return 1
      - run:
          name: handle Fail
          command: echo you only see this if a job failed
          when: on_fail

  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: aws cloudformation deploy --stack-name circleCI  --template-file template.yaml  --region=us-east-2
      - run:
          name: Output public IP to file
          command: aws cloudformation describe-stacks --stack-name circleCI --region=us-east-2 --output json --query "Stacks[*].Outputs[?(OutputKey=='PublicIp')].OutputValue" > sample.txt
      - run:
          name: print file
          command: cat sample.txt
      - run: return 1
      - destroy_environment:
          stack_name: circleCI        

  configurate_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["05:dd:20:70:3c:d8:a1:ab:62:15:22:7e:f9:f1:65:4a"]
      - run:
          name: Install dependencies
          command: apk add --update ansible
      - run:
          name: Configure Server
          environment:
            ANSIBLE_HOST_KEY_CHECKING: false
          command: ansible-playbook -i inventory.txt playbook.yml --ssh-common-args='-o StrictHostKeyChecking=no'
  
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run: apk add --update curl
      - run:
          name: Run Curl on server
          command: |
            URL="https://google.com"
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi
      
workflows:
  say-hello-workflow:
    jobs:
      - useful_info
  aws-cli:
    jobs:
      - create_infrastructure
      - configurate_infrastructure:
          requires:
            - create_infrastructure
      - smoke_test:
          requires:
            - configurate_infrastructure
